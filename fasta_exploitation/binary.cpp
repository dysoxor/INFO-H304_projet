#include "binary.h"
//ze test
void PIN::read(){
  ifstream filePIN;
  filePIN.open("uniprot_sprot.fasta.pin", ios::binary | ios::in);

  filePIN.seekg(0, ios::end);
  int size=filePIN.tellg();
  filePIN.seekg(0, ios::beg);

  cout << "File size is : " << size << endl;

  filePIN.read( (char *)&version, sizeof(uint32_t));
  version = __bswap_32(version);
  cout << "The version is : " << version << endl;

  filePIN.read( (char*)&database_type, sizeof(uint32_t));
  database_type = __bswap_32(database_type);
  cout << "The database type is : " << database_type << endl;

  filePIN.read( (char*)&title_length, sizeof(uint32_t));
  title_length = __bswap_32(title_length);
  cout << "The title length is : " << title_length << endl;

  title = new char[title_length];
  filePIN.read((char*)title, sizeof(char)*title_length);
  cout << "The title is : ";
  for (int i=0; i < title_length; i++){
    cout << title[i];
  }
  cout << endl;

  filePIN.read( (char*)&timestamp_length, sizeof(uint32_t));
  timestamp_length = __bswap_32(timestamp_length);
  cout << "The timestamp length is : " << timestamp_length << endl;

  timestamp = new char[timestamp_length];
  filePIN.read((char*)timestamp, sizeof(char)*timestamp_length);
  cout << "The timestamp is : ";
  for (int i=0; i < timestamp_length; i++){
    cout << timestamp[i];
  }
  cout << endl;

  filePIN.read( (char*)&num_of_seq, sizeof(uint32_t));
  num_of_seq = __bswap_32(num_of_seq);
  cout << "The number of sequences is : " << num_of_seq << endl;

  filePIN.read( (char*)&residue_count, sizeof(uint64_t));
  cout << "The residue count is : " << residue_count << endl;

  filePIN.read( (char*)&max_seq, sizeof(uint32_t));
  max_seq = __bswap_32(max_seq);
  cout << "The maximum sequence is : " << max_seq << endl;

  hr_offset_table = new uint32_t[num_of_seq+1];
  int sizeTable = sizeof(uint32_t)*(num_of_seq+1);
  filePIN.read((char*)hr_offset_table, sizeTable);
  cout << "The header offset table is : " << endl;
  for (int i=0; i < num_of_seq+1; i++){
    hr_offset_table[i] = __bswap_32(hr_offset_table[i]);
    //if( hr_offset_table[i] != 0)
    //cout << "[" << i << "]" << hr_offset_table[i] << endl;
  }

  seq_offset_table = new uint32_t[num_of_seq+1];
  filePIN.read((char*)seq_offset_table, sizeTable);
  cout << "The sequences offset table is : " << endl;
  for (int i=0; i < num_of_seq+1; i++){
    seq_offset_table[i] = __bswap_32(seq_offset_table[i]);
    //if( hr_offset_table[i] != 0)
    //cout << "[" << i << "]" << hr_offset_table[i] << endl;
  }

  filePIN.close();

}

int PIN::getNumSeq()const{
  return num_of_seq;
}

int PIN::getHrOffset(int i)const{
  return hr_offset_table[i];
}

int PIN::getSqOffset(int i)const{
  return seq_offset_table[i];
}

void PSQ::read(PIN* filePIN){
  ifstream filePSQ;
  filePSQ.open("uniprot_sprot.fasta.psq", ios::binary | ios::in);

  filePSQ.seekg(0, ios::end);
  int size=filePSQ.tellg();
  filePSQ.seekg(0, ios::beg);

  cout << "File size is : " << size << endl;
  int num = filePIN->getSqOffset(1);

  for(int i=0; i<num ; i++){
    filePSQ.read( (char*)&sequence, sizeof(uint8_t));
    cout << "seq[" << i << "]" << sequence << endl;
  }

  int num2 = filePIN->getSqOffset(2);

  for(int i=0; i<num2-num ; i++){
    filePSQ.read( (char*)&sequence, sizeof(uint8_t));
    cout << "seq[" << i << "]" << sequence << endl;
  }

  filePSQ.close();
}
