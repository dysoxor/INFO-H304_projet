#include "binary.h"
//ze test
void PIN::read(){
  ifstream filePIN;
  filePIN.open("uniprot_sprot.fasta.pin", ios::binary | ios::in);

  filePIN.seekg(0, ios::end);
  int size=filePIN.tellg();
  filePIN.seekg(0, ios::beg);

  cout << "File size is : " << size << endl;

  filePIN.read( (char *)&version, sizeof(uint32_t));
  version = __bswap_32(version);
  cout << "The version is : " << version << endl;

  filePIN.read( (char*)&database_type, sizeof(uint32_t));
  database_type = __bswap_32(database_type);
  cout << "The database type is : " << database_type << endl;

  filePIN.read( (char*)&title_length, sizeof(uint32_t));
  title_length = __bswap_32(title_length);
  cout << "The title length is : " << title_length << endl;

  title = new char[title_length];
  filePIN.read((char*)title, sizeof(char)*title_length);
  cout << "The title is : ";
  for (int i=0; i < title_length; i++){
    cout << title[i];
  }
  cout << endl;

  filePIN.read( (char*)&timestamp_length, sizeof(uint32_t));
  timestamp_length = __bswap_32(timestamp_length);
  cout << "The timestamp length is : " << timestamp_length << endl;

  timestamp = new char[timestamp_length];
  filePIN.read((char*)timestamp, sizeof(char)*timestamp_length);
  cout << "The timestamp is : ";
  for (int i=0; i < timestamp_length; i++){
    cout << timestamp[i];
  }
  cout << endl;

  filePIN.read( (char*)&num_of_seq, sizeof(uint32_t));
  num_of_seq = __bswap_32(num_of_seq);
  cout << "The number of sequences is : " << num_of_seq << endl;

  filePIN.read( (char*)&residue_count, sizeof(uint64_t));
  cout << "The residue count is : " << residue_count << endl;

  filePIN.read( (char*)&max_seq, sizeof(uint32_t));
  max_seq = __bswap_32(max_seq);
  cout << "The maximum sequence is : " << max_seq << endl;

  hr_offset_table = new uint32_t[num_of_seq+1];
  int sizeTable = sizeof(uint32_t)*(num_of_seq+1);
  filePIN.read((char*)hr_offset_table, sizeTable);
  cout << "The header offset table is : " << endl;
  for (int i=0; i < num_of_seq+1; i++){
    hr_offset_table[i] = __bswap_32(hr_offset_table[i]);
    //if( hr_offset_table[i] != 0)
    //cout << "[" << i << "]" << hr_offset_table[i] << endl;
  }

  seq_offset_table = new uint32_t[num_of_seq+1];
  filePIN.read((char*)seq_offset_table, sizeTable);
  cout << "The sequences offset table is : " << endl;
  for (int i=0; i < num_of_seq+1; i++){
    seq_offset_table[i] = __bswap_32(seq_offset_table[i]);
    //if( hr_offset_table[i] != 0)
    //cout << "[" << i << "]" << hr_offset_table[i] << endl;
  }

  filePIN.close();

}

int PIN::getNumSeq()const{
  return num_of_seq;
}

int PIN::getHrOffset(int i)const{
  return hr_offset_table[i];
}

int PIN::getSqOffset(int i)const{
  return seq_offset_table[i];
}

void PSQ::read(PIN* filePIN, string query){
  vector<int> table_query = queryToInt(query);

  ifstream filePSQ;
  filePSQ.open("uniprot_sprot.fasta.psq", ios::binary | ios::in);

  /*filePSQ.seekg(0, ios::end);
  int size=filePSQ.tellg();
  filePSQ.seekg(0, ios::beg);

  cout << "File size is : " << size << endl;*/

  bool finded = false;
  int sizeOfSq;
  int index = -1;
  for (int i = 0; i < filePIN->getNumSeq(); i++){
    if (finded){
      break;
    }
    sizeOfSq = filePIN->getSqOffset(i+1) - filePIN->getSqOffset(i) -1; //car bit 0 pour separer les sq
    if (sizeOfSq == table_query.size() ){
      filePSQ.seekg(filePIN->getSqOffset(i));
      for (int j = 0; j < sizeOfSq+1; j++){
        filePSQ.read((char*)&sequence, sizeof(uint8_t));
        if (sequence != 0){
          if (table_query[j] != sequence){
              break; //on a pas de correspondance parfaite
          }
        }
        else {
            finded = true;
            index = i;
            break;
        }
      }
    }
  }
  if (finded){
    cout << "Trouvé à l'offset n° " << index << endl;
  } else {
    cout << "Pas trouvé, rip" << endl;
  }
  filePSQ.close();
}

vector<int> PSQ::queryToInt(string query){
  vector<int> res;
  map<char,int> intToChar {
    {'-',0},{'A',1},{'B',2},{'C',3},{'D',4},
    {'E',5},{'F',6},{'G',7},{'H',8},{'I',9},
    {'K',10},{'L',11},{'M',12},{'N',13},{'P',14},
    {'Q',15},{'R',16},{'S',17},{'T',18},{'V',19},
    {'W',20},{'X',21},{'Y',22},{'Z',23},{'U',24},
    {'*',25},{'O',26},{'J',27}
  };

  for (int i = 0; i< query.size(); i++){
    int indice = intToChar[query.at(i)];
    res.push_back(indice);
  }
  return res;
}
