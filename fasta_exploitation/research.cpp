#include "binary.h"
#include <string>
#include "math.h"



int research(string sq, string pathSequence, PIN* filePIN){
  //research by name
  ifstream fileSequence(pathSequence);
  if (!fileSequence.is_open()){
    return -1;
  }
  string working;
  for (int i = 0; i < filePIN->getNumSeq(); i++){
    int size = filePIN->getSqOffset(i+1) - filePIN->getSqOffset(i);
    fileSequence.read((char*)&working, size);
    if(binaryToString(working) == sq){
      return i;
    }
  }
  cout << "Aucun résultat à la recherche" << endl;
  return -1;
  /*int posSq;;
  int sizeSq;
  string potentialSq;
  int posHr;
  int sizeHr;
  string hr;
  for (int i = 0; i<filePIN -> getNumSeq(); i++){
    posSq = filePIN->getSqOffset(i);
    sizeSq = filePIN->getHrOffset(i+1)-position;
    fileHeader.seekg(position, ios::base);
    filePIN->read((char*)&potentialSq, size);

    if (potentialSq == sq){
      cout << "Sequence trouvée" << endl;
      posHr = fileHeader.seekg(filePin->getHrOffset(i),ios::base);
      sizeHr = posSq - posHr;
      filePin.read((char*)&hr, sizeHr);
      return hr;
    }
  }
  return "No value";*/
}

int getIndexOf(string line, char toFind){
  for (int i = 0; i<line.size(); i++){
    if (line[i] == toFind){
      return i;
    }
  }
}

string hexToString(string hexLine){
  const string hexToInt = "0123456789ABCDEF";
  //const char intToChar[28] = {'-','A','B','C','D','E','F','G','H','I','K','L','M','N','P','Q','R','S','T','V','W','X','Y','Z','U','*','O','J'};
  int hex1;
  int hex0;
  int integer;
  char value;
  string res = "";
  for (int i = 0; i < hexLine.size(); i+=2){
    hex1 = getIndexOf(hexToInt, hexLine[i]);
    hex0 = getIndexOf(hexToInt, hexLine[i+1]);
    integer = hex1*16+hex0;
    value = integer;
    res+=value;
  }
  return res;
}

string binaryToString(string binaryLine){
  const char intToChar[28] = {'-','A','B','C','D','E','F','G','H','I','K','L','M','N','P','Q','R','S','T','V','W','X','Y','Z','U','*','O','J'};
  int integer = 0;
  string res = "";
  float value;
  for (int i = 0; i < binaryLine.size(); i+=8){
    for (int j = 0; j < 8; j++){
      if (binaryLine[i+j] == '1'){
        integer += pow(2,7-j);
      }
    }
    res+=intToChar[integer];
  }
  return res;
}



int main(int argc, char** argv){
  string value = argv[1];
  //cout << binaryToString(value) << endl;

  cout << hexToString(value) << endl;
}
